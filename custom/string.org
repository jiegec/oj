# -*- org-export-babel-evaluate: nil -*-
#+REVEAL_HLEVEL: 2
#+AUTHOR: 陈嘉杰
#+EMAIL: jiegec@qq.com
#+TITLE: 1076. 字符串变换
#+STARTUP: showall
* 回顾题目
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

  要求实现一个程序，支持五种字符串操作

  #+ATTR_REVEAL: :frag (appear)
  1. 小写 -> 大写
  2. 大写 -> 小写
  3. 逆序
  4. 大写 <-> 小写
  5. 大写 -> 小写后，合并连续字符

  #+ATTR_REVEAL: :frag (appear)
  然后把结果输出到控制台

** 首先，把输入和操作判断的框架写好：

   #+BEGIN_SRC cpp
     #include <stdio.h>
     #include <string.h>

     int main() {
       int action;
       char buffer[1024];
       scanf("%d %s", &action, buffer);

       switch(action) {
       case 1:
         break;
       case 2:
         break;
       case 3:
         break;
       case 4:
         break;
       case 5:
         break;
       }
       return 0;
     }
   #+END_SRC

** 然后，开始一个一个填坑：
   第一个是 小写 -> 大写。

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
     int len = strlen(buffer);
     int i;
     switch(action) {
      case 1:
        for (i = 0;i < len;i++) {
          if ('a' <= buffer[i] && buffer[i] <= 'z') {
            putchar(buffer[i] - 'a' + 'A');
          } else {
            putchar(buffer[i]);
          }
        }
        break;
     }
   #+END_SRC

   #+REVEAL: split
   第二个是 大写 -> 小写。

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
     switch(action) {
      case 2:
        for (i = 0;i < len;i++) {
          if ('A' <= buffer[i] && buffer[i] <= 'Z') {
            putchar(buffer[i] - 'A' + 'a');
          } else {
            putchar(buffer[i]);
          }
        }
        break;
     }
   #+END_SRC

   #+REVEAL: split
   第三个是 逆序。

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
     switch(action) {
      case 3:
        // Method 1
        for (i = 0;i < len;i++) {
          putchar(buffer[len-i-1]);
        }
        // Method 2
        for (i = len-1;i >= 0;i--) {
          putchar(buffer[i]);
        }
        break;
     }
   #+END_SRC

   #+REVEAL: split
   第四个是 大写 <-> 小写。

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
     switch(action) {
      case 4:
        for (i = 0;i < len;i++) {
          if ('A' <= buffer[i] && buffer[i] <= 'Z') {
            putchar(buffer[i] - 'A' + 'a');
          } else {
            putchar(buffer[i] - 'a' + 'A');
          }
        }
        break;
     }
   #+END_SRC

   #+REVEAL: split
   第五个是 大写 -> 小写，再合并连续的字符。

   #+ATTR_REVEAL: :frag (appear)
   首先把 大写 -> 小写 实现了:

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
     switch(action) {
      case 5:
        for (i = 0;i < len;i++) {
          if ('A' <= buffer[i] && buffer[i] <= 'Z') {
            buffer[i] = buffer[i] - 'A' + 'a';
          }
        }
        // TO-DO
        break;
     }
   #+END_SRC

   #+REVEAL: split
   接下来，考虑一下如何实现这个合并连续的字符：

   #+ATTR_REVEAL: :frag (appear)
   1. 首先，用一个 ~begin~ 记录一下连续的字符的开头。
   2. 由于小写字符在ASCII码里都是连续的，我们只要记录连续的字符开头所在的位置 ~begin_pos~ 那么，如果结尾的位置为 ~i~ ，那么连续的字符就以 ~begin+(i-begin_pos)~ 结尾。
   3. 那么，思路就出来了：
      a. 如果当前的字符和前面连续的搭不上，我们就把前面的输出，注意考虑长度为一、长度为二的特殊情况，然后把 ~begin~ 和 ~begin_pos~ 都设成当前的这一个。
      b. 如果当前的字符和前面连续的搭上了，也就是说 ~buffer[i] == begin+(i-begin_pos)~ ，好，那就继续往下扫描。
      c. 当字符串结束的时候，看看现在有没有剩的连续的字符，有就输出。

   #+REVEAL: split
   #+BEGIN_SRC cpp
    begin = buffer[0];
    begin_pos = 0;
    for (i = 1;i < len;i++) {
      if (buffer[i] != begin+(i-begin_pos)) {
        putchar(begin);
        if (i - begin_pos >= 3) {
          putchar('-');
        }
        if (i - begin_pos >= 2) {
          putchar(begin+(i-begin_pos-1));
        }

        begin = buffer[i];
        begin_pos = i;
      }
    }
    // trailing consecutive characters
    putchar(begin);
    if (i - begin_pos >= 3) {
      putchar('-');
    }
    if (i - begin_pos >= 2) {
      putchar(begin+(i-begin_pos-1));
    }
   #+END_SRC

   #+REVEAL: split
   当然，如果不想特别考虑怎么输出最后的一组连续字符，我们也可以用另一种实现：

   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC cpp
    begin = buffer[0];
    begin_pos = 0;
    for (i = 1;i <= len;i++) {
      if (buffer[i] != begin+(i-begin_pos)) {
        putchar(begin);
        if (i - begin_pos >= 3) {
          putchar('-');
        }
        if (i - begin_pos >= 2) {
          putchar(begin+(i-begin_pos-1));
        }

        begin = buffer[i];
        begin_pos = i;
      }
    }
   #+END_SRC

   #+ATTR_REVEAL: :frag (appear)
   注意此处的 ~i < len~ 改成了 ~i <= len~ 。利用字符串末尾的 ~'\0'~ ，我们简化了一点代码。

* Q & A ?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 补充内容
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

  那么，标准库中有没有上面需要实现的一些功能呢？

  #+ATTR_REVEAL: :frag (appear)
  是的。 ~islower~ ~isupper~ ~tolower~ ~toupper~ 可以完成大小写的判断和转换。
